#version 300 es

in highp vec3 vertexPosition;
smooth in highp vec3 N;
in highp vec2 texCoord0;
in highp vec3 normal0;

out highp vec4 fColor;

uniform highp sampler2D texSampler0;
uniform highp sampler2D texSampler1;
uniform highp sampler2D texSampler2;
uniform highp sampler2D texSampler3;

struct Lightsource
{
	highp vec3 position;
	highp vec3 direction;
	highp vec3 attentuation;
	highp vec3 color;

};
struct Material
{
	highp vec4 diffuse;	
	highp vec4 ambient;	
	highp vec4 specular;
	highp vec4 emissive;
	highp float shininess;
};

uniform Material meshMat;
uniform Lightsource light;

void main()
{
	highp vec3 lightDirection = normalize(light.position - vertexPosition);
	highp vec3 viewDirection = normalize(-vertexPosition);
	highp vec3 halfwayVector = normalize(lightDirection);
	
	highp float diffuseComponent = max(dot(N, lightDirection), 0.0);

	highp float specularComponent = pow(max(dot(halfwayVector, N), 0.0), meshMat.shininess);

	highp vec4 texture = texture2D(texSampler0, texCoord0) + texture2D(texSampler1, texCoord0);

	fColor = texture * (
		meshMat.ambient
		+
		diffuseComponent * meshMat.diffuse
		+
		specularComponent * meshMat.specular
	);	
}