#version 300 es

in highp vec3 vertexPosition;
smooth in highp vec3 N;
in highp vec2 texCoord0;
in highp float pass_time;
in highp mat4 pass_normalMat;
in highp mat4 pass_modelViewMat;

out highp vec4 fColor;

uniform highp sampler2D texSampler0;
uniform highp sampler2D texSampler1;
uniform highp sampler2D texSampler2;
uniform highp sampler2D texSampler3;

struct Lightsource
{
	highp vec3 position;
	highp vec3 direction;
	highp vec3 attentuation;
	highp vec3 color;

};
struct Material
{
	highp vec4 diffuse;	
	highp vec4 ambient;	
	highp vec4 specular;
	highp vec4 emissive;
	highp float shininess;
};

uniform Material meshMat;
uniform Lightsource light;

highp float rand(in highp vec2 co){
    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);
}

highp vec4 applyFog(
	in highp vec4 rgba,
	in highp float distance,
	in highp float density
	)
{
	// constant fog amount
	highp float fogAmount = 1.0 - exp(-distance * density);
	highp vec4 fogColor = vec4(0.3,0.3,0.3, 1.0);
	return mix(rgba, fogColor, fogAmount);
}

void main()
{
	//
	// texture
	//
	highp vec4 texture = mix(
		texture2D(texSampler0, texCoord0),
		texture2D(texSampler1, texCoord0),
		0.5
	);

	// specular light
	highp float specularComponent = 0.0;

	// move normal to eye space
	highp vec3 n = normalize(mat3(pass_modelViewMat) * N); 

	// diffuse
	highp vec3 s =  mat3(pass_normalMat) * normalize( light.position );
	highp float diffuseComponent = max(dot(n, s), 0.0);

	highp vec3 v = normalize(-vertexPosition);
	highp vec3 r = reflect(-s, n);
	if(diffuseComponent > 0.0) {
	  	specularComponent = pow(
	  		max(
	  			dot(r, v), 0.0),
	  		meshMat.shininess
	  	);
	}

	fColor = mix(texture,
		meshMat.ambient
		+
		diffuseComponent * meshMat.diffuse
		+
		specularComponent * meshMat.specular,
		0.5
	);

	fColor = applyFog(fColor, length(vertexPosition), 0.08 );

	// 
	// <normal-debugging>
	// 
		/*
		fColor = 0.5 + 0.5 * vec4(N, 1.0);
		*/
	//
	// </normal-debugging>
	//

	// 
	// <static-lighting-debug>
	//
	    /*
		highp vec3 spec = vec3(0.0);
		highp vec3 n = normalize(mat3(pass_modelViewMat) * N); // modelview matrix to move the normal into eye space
		 
		// diffuse
		highp vec3 s = mat3(pass_modelViewMat) * normalize(vec3(100.0, 100.0, -100.0));
		highp float sdn = max(dot(n, s), 0.0);
		 
		highp vec3 v = normalize(-vertexPosition);
		highp vec3 r = reflect(-s, n);
		if(sdn > 0.0) {
		  spec = pow(max(dot(r, v), 0.0), 1.3) * vec3(1.0, 0.0, 1.0);
		}
		 
		fColor.a = 1.0;
		fColor.rgb = vec3(0.0, 0.2, 0.6) * sdn + 0.4 * spec;
		*/
	//
	// </static-lighting-debug>
	//

}