#version 150

in vec3 N;
in vec3 V;
in vec3 L;
in vec2 texCoord0;
in vec3 normal0;

out vec4 fColor;

uniform sampler2D sampler;
uniform vec3 lightDirection;
uniform vec3 lightPosition;

struct Lightsource
{
	vec3 diffuse;
	vec3 ambient;
	vec3 specular;
};
struct Material
{
	vec4 diffuse;	
	vec4 ambient;	
	vec4 specular;
	vec4 emissive;
	float shininess;
};

uniform Material meshMat;
uniform Lightsource light;

void main()
{
	vec3 R = reflect(-L, N);
	vec4 diffuse = max(dot(N, L), 0.0) * meshMat.diffuse;
	vec4 specular = pow(max(dot(R, V), 0.0), meshMat.shininess) * meshMat.specular;
	vec4 ambient = meshMat.ambient * vec4(light.ambient, 1.0);
	fColor = texture2D(sampler, texCoord0)* (diffuse + ambient + specular);	
}